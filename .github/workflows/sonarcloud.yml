# SonarCloud analysis for C# repo that compiles with VS 2019 (hopefully works with VS 2022 also)
# -----------------------------------------------------------------------------
# What this does:
#   1) Builds the code under Sonar's Build Wrapper (produces compile_commands.json)
#   2) Runs the SonarCloud scanner
#   3) Waits for analysis to finish, pulls issues from SonarCloud's API,
#      converts to SARIF, uploads as an artifact
#   4) Publishes the SARIF to GitHub Code Scanning in a separate, least-privilege job
#
# Why it looks this way (key principles):
#   • Default‑deny permissions – read‑only by default; elevate only in the upload job
#   • Pinned actions – commit SHAs, not floating tags, for reproducibility and tamper‑resistance
#   • Hardened egress – audit (or block) network calls to limit exfiltration risk
#   • Concurrency – cancel superseded runs to save time and money
#   • Timeouts – fail fast instead of hanging for hours
#   • Scoped checkout credentials – don't persist the GitHub token into the repo
#   • Clear triggers – run only when relevant files change
#
# Prereqs in the repo:
#   • sonar-project.properties with:
#       sonar.projectKey=<your_sonarcloud_project_key>
#       sonar.organization=<your_sonarcloud_org_key>
#       sonar.sources=.
#   • More requirements described below
#
# Secret needed:
#   • SONAR_TOKEN (Actions → Secrets) – a SonarCloud user token with access to the project

# SonarCloud analysis for a .NET/MSBuild repo (Windows/VS2022)
# -----------------------------------------------------------------------------
# Key principles kept from your C workflow:
#   • Default-deny perms; elevate only in the upload job
#   • Pinned actions by commit SHA
#   • Hardened egress (audit mode by default)
#   • Concurrency + timeouts
#   • No persisted checkout creds
#   • Clear PR triggers
#
# Notes:
#   • Uses GitHub-hosted Windows 2022 runner (includes Visual Studio 2022).
#   • Uses SonarScanner for .NET (begin → msbuild → end).
#   • Still generates SARIF from SonarCloud issues and publishes to Code Scanning.

name: SonarCloud (.NET / MSBuild on Windows)

on:
  push:
    branches: [ "main" ]
    # Trigger only when .NET/MSBuild sources, the workflow, or Sonar properties change
    # paths:
    #   - '**/*.sln'
    #   - '**/*.csproj'
    #   - '**/*.vbproj'
    #   - '**/*.props'
    #   - '**/*.targets'
    #   - 'sonar-project.properties'
    #   - '.github/workflows/sonarcloud-dotnet.yml'
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]
    # paths:
    #   - '**/*.sln'
    #   - '**/*.csproj'
    #   - '**/*.vbproj'
    #   - '**/*.props'
    #   - '**/*.targets'
    #   - 'sonar-project.properties'
    #   - '.github/workflows/sonarcloud-dotnet.yml'
  # workflow_dispatch:

# Cancel older in-flight runs of the same ref. Avoids CI pile-ups on active PRs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Default-deny: grant only read by default at the workflow level.
permissions:
  contents: read

jobs:
  # Job 1: build + scan + export SARIF (no write scopes here)
  build-and-scan:
    name: Build and analyze (Windows/VS2022)
    runs-on: windows-2022                # GitHub-hosted Windows Server 2022 + VS 2022
    timeout-minutes: 25                  # Cap wall-clock time for the job
    permissions:
      contents: read                     # Read-only; no secret write scopes here
    env:
      # Provide paths if you want; by default we build the first solution found.
      SOLUTION_FILE: '**/*.sln'

    steps:
      # Lock down outbound network. Start in audit mode; switch to block + allowlist later.
      - name: Harden runner (audit egress)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          # When the workflow is stable, prefer:
          # egress-policy: block
          # allowed-endpoints: >
          #   sonarcloud.io
          #   api.sonarcloud.io
          #   github.com
          #   api.github.com
          #   uploads.github.com
          #   objects.githubusercontent.com

      # Do not persist the GITHUB_TOKEN into the repo (reduces risk in later steps)
      - name: Checkout (no persisted creds)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0                 # Full history improves blame/issue precision
          persist-credentials: false     # Do not leave a token in .git/config

      # Put MSBuild (VS 2022) on PATH and prefer 64-bit
      - name: Setup MSBuild (x64)
        uses: microsoft/setup-msbuild@6fb022260eb8f8bb1b611d3aa0f8f04f15b4a1c6 # v2
        with:
          msbuild-architecture: x64

      # Begin SonarScanner for .NET
      - name: SonarScanner begin
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # SonarCloud user token; no GitHub write scope needed
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 9.*
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          # Read keys from sonar-project.properties to keep a single source of truth
          $projectKey = (Select-String -Path sonar-project.properties -Pattern '^sonar\.projectKey=(.+)$').Matches.Groups[1].Value
          $orgKey     = (Select-String -Path sonar-project.properties -Patte
